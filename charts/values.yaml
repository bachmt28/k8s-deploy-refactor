# =========================
# IDENT / LABEL INPUTS
# =========================
env: [] # optional live | pilot | uat 
org: [] # optional sb | ptf | asean
system: [] # optional
mainLabel: example-workload
# nameOverride: ""
fullnameOverride: ""


# =========================
# WORKLOAD MAIN
# =========================
workload:
  # ---- Pod-level ----
  kind: Deployment
  replicas: 2
  strategy:
    type: RollingUpdate
    rollingUpdate: { maxSurge: 25%, maxUnavailable: 0 }

  terminationGracePeriodSeconds: 30

  extraPodLabels: {}
  podAnnotations: {}

  nodeSelector: {}
  tolerations: []
  affinity: {}
  topologySpreadConstraints: []

  podSecurityContext:
    runAsNonRoot: true
    fsGroup: 2000
  priorityClassName: ""
  dnsConfig: {}
  hostAliases: []

  volumes:
    - name: cfg
      configMap:
        name: ""
        optional: true
    - name: tmp
      emptyDir: {}

  imagePullSecrets: []   # [{ name: nexus-repo-secret }]

  # ---- Containers ----
  main:
    name: app
    image:
      repository: nexus-img.seabank.com.vn
      name: example-workload
      tag: "1.0.0"
      pullPolicy: IfNotPresent
    command: []
    args: []
    env:
      - { name: TZ, value: Asia/Ho_Chi_Minh }
      - { name: SPRING_PROFILES_INCLUDE, value: fwbase }
    envFrom: []
    ports:
      - { name: http, containerPort: 8081, protocol: TCP }
    resources:
      requests: { cpu: "1", memory: 1Gi }
      limits:   { cpu: "2", memory: 2Gi }
    volumeMounts:
      - { name: cfg, mountPath: /opt/config }
      - { name: tmp, mountPath: /tmp }
    # livenessProbe:
    #   httpGet: { path: /actuator/health/liveness, port: 8081 }
    #   initialDelaySeconds: 20
    #   periodSeconds: 10
    #   timeoutSeconds: 2
    #   failureThreshold: 3
    # readinessProbe:
    #   httpGet: { path: /actuator/health/readiness, port: 8081 }
    #   initialDelaySeconds: 10
    #   periodSeconds: 5
    #   timeoutSeconds: 2
    #   failureThreshold: 6
    # startupProbe:
    #   enabled: false
    #   httpGet: { path: /actuator/health, port: 8081 }
    #   failureThreshold: 30
    #   periodSeconds: 5
    securityContext:
      allowPrivilegeEscalation: false
      runAsNonRoot: true
      capabilities: { drop: ["ALL"] }

  initContainers: []
  # - name: init-main
  #   image: { repository: busybox, tag: "1.36", pullPolicy: IfNotPresent }
  #   command: ["sh","-c"]
  #   args: ["cp /seed/* /opt/config/"]
  #   env: []
  #   envFrom: []
  #   resources: {}
  #   volumeMounts: [{ name: cfg, mountPath: /opt/config }]
  #   securityContext: {}

  sidecars: []
  # - name: metrics
  #   image: { repository: prom/node-exporter, tag: "v1.7.0", pullPolicy: IfNotPresent }
  #   ports: [{ name: metrics, containerPort: 9100 }]
  #   resources: {}
  #   volumeMounts: []
  #   livenessProbe: {}
  #   readinessProbe: {}
  #   startupProbe: { enabled: false }
  #   securityContext: {}

# =========================
# SERVICE (publish cổng của main)
# =========================
service:
  name: ""
  type: ClusterIP
  annotations: {}
  ports:
    - { name: http, port: 8081, targetPort: 8081 }

# =========================
# CONFIGMAP / SECRETS
# =========================
configMap:
  enabled: true
  name: ""
  data: {}

secrets:
  enabled: true
  name: ""
  autoMount: true
  stringData: {}

# =========================
# SERVICEACCOUNT / HPA / PDB
# =========================
serviceAccount:
  create: true
  name: ""
  annotations: {}
  automount: true

hpa:
  enabled: true
  minReplicas: 1
  maxReplicas: 3
  metrics: []
  behavior: {}

pdb:
  enabled: true
  minAvailable: 1
